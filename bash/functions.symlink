# --------------------------------------------------
# FUNCTIONS
# --------------------------------------------------

function update_all() {
    echo "Updating all brews"
    brew update && \
        brew upgrade && \
        brew cleanup

    echo "Updating gems"
    gem update && gem cleanup;

    echo "Running software update"
    softwareupdate -l;

    echo "Running mac app store upgrade"
    mas upgrade

    echo "Updating vim plugins"
    nvim --headless "+Lazy! sync" +qa
}

function spotify_running() {
    osascript -e "tell application \"System Events\" to (name of processes) contains \"Spotify\""
}

function tell_spotify() {
    osascript -e "tell application \"Spotify\" to $1"
}

function spnext {
    tell_spotify "next track"
}

function spprev {
    tell_spotify "previous track"
}

function spplay {
    tell_spotify "playpause"
}

function spcurr {
    tell_spotify "current track's artist & \" - \" & current track's name & \" (\" & current track's album & \")\""
}

function spcurrshort {
    tell_spotify "current track's artist & \" - \" & current track's name"
}

function spprog {
    prog=$(convertsecs `tell_spotify "player position as integer"`)
    dur=$(convertsecs `tell_spotify "current track's duration / 1000 as integer"`)

    echo "$prog/$dur"
}

function sp_tmux() {
    running=$(spotify_running)
    if [ "$running" = "true" ]; then
        state=$(tell_spotify "player state")
        icon="⋫"
        if [ "$state" = "playing" ]; then
            icon="⊳"
        fi
        echo "[$icon $(spcurrshort)]"
    fi
}

function newer() {
    local pwdsum=$(pwd | shasum | cut -f1 -d ' ')
    local touchpoint="$TMPDIR.newer-touch-point.$pwdsum"

    local isolderthan24h=$(find "$touchpoint" -mtime +23h30m)

    if [ "$isolderthan24h" ]; then
        rm -rf "$touchpoint"
    fi

    if [ ! -f "$touchpoint" ]; then
        echo $@
        touch $touchpoint
        return
    fi

    for f in $@; do
        if [ "$f" -nt "$touchpoint" ]; then
            echo $@
        fi
    done
}

function newer_reset() {
    local pwdsum=$(pwd | shasum | cut -f1 -d ' ')
    local touchpoint="$TMPDIR.newer-touch-point.$pwdsum"
    rm -rf "$touchpoint"
}

function set_alactritty_color() {
    local config_file="$HOME/.config/alacritty/alacritty.yml"
    local found=$(grep "$1" "$config_file")
    if [ "$found" ]; then
        sed -i '' -e "s/^colors:.*/colors: *$1/"  "$config_file"
    fi;
}
