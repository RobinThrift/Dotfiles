# --------------------------------------------------
# FUNCTIONS
# --------------------------------------------------

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}


alias food='curl "http://www.stwh-portal.de/mensa/index.php?wo=2&wann=2&format=txt" -s | grep "> [ETW]." | sed "s/([vnks0-9]*)//g" | sed "s:/[0-9]*,[0-9]*./[0-9]*,[0-9]*.::g" | head -23 | tail -12'


# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
#        python -mjson.tool <<< "$*" | pygmentize -l javascript
        echo 'replace me!';
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# opens vim with the first search result from ag
function agvim() {
    vim `ag $1 $2 -c | head -n 1 | sed 's/:.*//'`;
}

# setup default docker-machine env
function dme() {
    eval "$(docker-machine env default)";
    export DOCKER_MACHINE_IP=`docker-machine ip default`
}

# open logbook
function lb() {
    nvim $LOGBOOK_PATH/$(date '+%Y-%m-%d').md
}

# search logbook
function slb() {
    cd $LOGBOOK_PATH
    rg $1
    cd -
}

function update_all() {
    echo "Updating all brews"
    brew update && \
        brew upgrade && \
        brew cleanup

    echo "Updating gems"
    gem update && gem cleanup;

    echo "Running software update"
    softwareupdate -l;

    echo "Running mac app store upgrade"
    mas upgrade

    echo "Upgrading vim-plug"
    nvim -c "PlugUpgrade"

    echo "Updating vim plugins"
    nvim -c "PlugUpdate"
}

function bash_bible() {
    echo "https://github.com/dylanaraps/pure-bash-bible/blob/master/README.md"
}

function convertsecs() {
    printf '%02d:%02d' $(($1%3600/60)) $(($1%60))
}

function spotify_running() {
    osascript -e "tell application \"System Events\" to (name of processes) contains \"Spotify\""
}

function tell_spotify() {
    osascript -e "tell application \"Spotify\" to $1"
}

function spnext {
    tell_spotify "next track"
}

function spprev {
    tell_spotify "previous track"
}

function spplay {
    tell_spotify "playpause"
}

function spcurr {
    tell_spotify "current track's artist & \" - \" & current track's name & \" (\" & current track's album & \")\""
}

function spcurrshort {
    tell_spotify "current track's artist & \" - \" & current track's name"
}

function spprog {
    prog=$(convertsecs `tell_spotify "player position as integer"`)
    dur=$(convertsecs `tell_spotify "current track's duration / 1000 as integer"`)

    echo "$prog/$dur"
}

function sp_tmux() {
    running=$(spotify_running)
    if [ "$running" = "true" ]; then
        state=$(tell_spotify "player state")
        icon="⋫"
        if [ "$state" = "playing" ]; then
            icon="⊳"
        fi
        echo "[$icon $(spcurrshort)]"
    fi
}
