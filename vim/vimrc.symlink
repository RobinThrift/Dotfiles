
"  ▄█    █▄   ▄█    ▄▄▄▄███▄▄▄▄
" ███    ███ ███  ▄██▀▀▀███▀▀▀██▄
" ███    ███ ███▌ ███   ███   ███
" ███    ███ ███▌ ███   ███   ███
" ███    ███ ███▌ ███   ███   ███
" ███    ███ ███  ███   ███   ███
" ███    ███ ███  ███   ███   ███
"  ▀██████▀  █▀    ▀█   ███   █▀


" ----------------------
"  GENERAL
" ----------------------
call plug#begin('~/.vim/plugged')

" allow clipboard
set clipboard=unnamed

" custom leader
let mapleader = ","

" jk as escape sequence in insert mode
inoremap jk <esc>

" Enable Filetype plugins
filetype on
filetype plugin on
filetype indent on

" set autoread, so changes from outside are read
set autoread

" Let's Get WILD(mode)
set wildmode=list:full

" cmd bar height
set cmdheight=1

" ignore case when searching & highlight results
set ignorecase
set smartcase
set hlsearch
set incsearch

" regex magic 
set magic


" ----------------------
"  BUFFERS
" ----------------------

" switch to last used buffer
nnoremap <Leader>l :b#<CR>


" ----------------------
"  UI
" ----------------------

set t_Co=256

" Don't redraw while executing macros (good performance config)
set lazyredraw

" clear highlighted text on esc
nnoremap <silent> <esc> :noh<cr><esc>

" turn off error notifiers
set noerrorbells
set novisualbell

" Resize vertical split
nnoremap <silent> <Leader>> :exe "vertical resize +5"<CR>
nnoremap <silent> <Leader>< :exe "vertical resize -5"<CR>

" show what I'm doing
set showmode
set showcmd

" SYNTAX & UI
syntax on
syntax enable

set splitbelow " more natural splits
set splitright

" highlight brackets
set showmatch
hi MatchParen cterm=underline ctermbg=none ctermfg=blue
hi Search cterm=none ctermfg=black ctermbg=yellow

" Highlight EOL
set list
set listchars=tab:∙\ ,eol:¬,extends:…,precedes:…

" ----------------------
"  FILES
" ----------------------

set encoding=utf8
set ffs=unix,dos,mac
set nobackup " no backpus
set nowb
set noswapfile
set hidden


" ----------------------
"  TEXT EDITING
" ----------------------
set expandtab " spaces instead of tabs
set smarttab
set shiftwidth=4
set tabstop=4

set scrolloff=3

set lbr
set tw=400 " linebreak after 400 chars

set ai "Auto indent
set si "Smart indent
set nowrap "Don't wrap lines

" automaticcaly create the directory for the file, if it doesn't exist
" thanks to https://www.reddit.com/r/vim/comments/5iu1hl/make_vim_create_subfolders_when_the_filename/dbbf8ph/
fun! <SID>AutoMakeDirectory()
    let s:directory = expand("<afile>:p:h")

    if !isdirectory(s:directory)
        call mkdir(s:directory, "p")
    endif
endfun

autocmd BufWritePre,FileWritePre * :call <SID>AutoMakeDirectory()

" ----------------------
"  MAPS
" ----------------------

" Use ctrl-[hjkl] to select the active split
nmap <silent> <c-k> :wincmd k<CR>                                                                                                                       
nmap <silent> <c-j> :wincmd j<CR>                                                                                                                       
nmap <silent> <c-h> :wincmd h<CR>                                                                                                                       
nmap <silent> <c-l> :wincmd l<CR>

" select pasted test usign gp
nnoremap gp `[v`]`


" autocomplete on ctrl + c
imap <c-y> <c-x><c-o>
set complete=.,b,u,] " pull autocomplete from all sources (files, buffers, tags)


" Invert apostrophe/backtick 'jump to mark' behavior
nnoremap ' `
nnoremap ` '

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


" Enable/disable relative numbers
nnoremap <leader>n :call ToggleNumber()<CR>

" Enable/disable relative numbers
nnoremap <leader>r :call ToggleRelativeNumber()<CR>

function! ToggleRelativeNumber()
  if &relativenumber
    set norelativenumber
    set number
  else
    set relativenumber
    set nonumber
  endif
endfunction

function! ToggleNumber()
  if &number
    set nonumber
  else
    set number
  endif
endfunction

" ,+s to save, reduce key strokes
nnoremap <Leader>s :w<CR>

" use K to join current line with line above, just like J does with line below
nnoremap K kJ


" quickfix navigation
nnoremap <leader>q :cnext<CR>
nnoremap <leader>a :cprevious<CR>

" open file under cursor in splits
map gfv :vertical wincmd f<CR>
map gfs wincmd f<CR>
noremap gfc gf

" do something useful with umlauts
nmap ä }
nmap ö {
nmap ü %


" ----------------------
"  TOOLS
" ----------------------
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-surround'

Plug 'Raimondi/delimitMate' 
let delimitMate_balance_matchpairs = 1
let delimitMate_expand_cr = 1
let delimitMate_jump_expansion = 1

Plug 'tpope/vim-commentary'


Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Special'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'Normal'],
  \ 'prompt':  ['fg', 'String'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Comment'],
  \ 'header':  ['fg', 'Comment'] }

let g:fzf_layout = { 'right': '50%' }
let g:fzf_buffers_jump = 1
inoremap <expr> <c-x><c-k> fzf#complete()

" fuzzy open
nnoremap <leader>e :GFiles<CR>

" fuzzy buffer open
nnoremap <leader>b :Buffers<CR>

" fuzzy line search
nnoremap <leader>f :BLines<CR>
nnoremap <leader>g :Lines<CR>

" More powerful find
let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "*.{js,json,ts,md,html,cpp,c,go,conf,swift,rs,java}"
  \ -g "!{.git,node_modules,vendor}/*" '

command! -bang -nargs=* F call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

" ----------------------
"  GIT
" ----------------------
Plug 'airblade/vim-gitgutter'
let g:gitgutter_override_sign_column_highlight=0
Plug 'tpope/vim-fugitive'

" ----------------------
"  LANGUAGES
" ----------------------

Plug 'othree/html5.vim', { 'for': 'html' }
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key='<C-E>'

" Markdown
Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'latex'] }
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.md hi link mkdLineBreak Underlined
let g:vim_markdown_folding_disabled=1
autocmd FileType markdown setlocal conceallevel=0

" Rust
Plug 'rust-lang/rust.vim'


" Swift
Plug 'keith/swift.vim'


Plug 'vim-pandoc/vim-pandoc-syntax'
" g:pandoc#syntax#conceal#use = 0

augroup pandoc_syntax
    au! BufNewFile,BufFilePRe,BufRead *.md set filetype=markdown.pandoc
augroup END

" Go
Plug 'fatih/vim-go'
let g:go_fmt_autosave = 0
let g:go_highlight_methods = 1
let g:go_highlight_build_constraints = 1
let g:go_list_height = 0
autocmd FileType go nmap <buffer> td <Plug>(go-def)
autocmd FileType go nmap <buffer> tds <Plug>(go-def-split)
autocmd FileType go nmap <buffer> tdv <Plug>(go-def-vertical)
autocmd FileType go nmap <buffer> tl :GoLint<CR>
autocmd FileType go nmap <buffer> tm :GoMetaLinter<CR>
autocmd FileType go setlocal completeopt+=menu

" Goyo and limelight, for focusing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

let g:limelight_conceal_ctermfg = 7
let g:goyo_width = 100
let g:limelight_paragraph_span = 1


function! s:goyo_enter()
    set wrap
    set noshowmode
    set noshowcmd
    set scrolloff=999
    set spell
    set spelllang=en_gb

    noremap  <buffer> <silent> k gk
    noremap  <buffer> <silent> j gj
    noremap  <buffer> <silent> 0 g0
    noremap  <buffer> <silent> $ g$
    Limelight
endfunction

function! s:goyo_leave()
    set showmode
    set showcmd
    set scrolloff=3
    set nospell
    set nowrap

    set background=dark
    let g:dracula_colorterm = 0
    let g:dracula_italic = 0
    colorscheme dracula
    source ~/.colors/mods.vim

    set laststatus=2
    set statusline=%=\ %m%f\ %y\ %l:%c\ \ 

    unmap  <buffer> <silent> k
    unmap  <buffer> <silent> j
    unmap  <buffer> <silent> 0
    unmap  <buffer> <silent> $

    Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" autocomplete
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'zchee/deoplete-go', { 'do': 'make'}

    let g:deoplete#enable_at_startup = 1
    let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
    set completeopt-=preview
endif

Plug 'dracula/vim', { 'as': 'dracula' }

call plug#end()



" ----------------------
"  COLOURSCHEME and STYLES
" ----------------------

set fillchars+=vert:\ 
set laststatus=2
set statusline=%=\ %m%f\ %y\ %l:%c\ \ 

set background=dark
let g:dracula_colorterm = 0
let g:dracula_italic = 0
colorscheme dracula
source ~/.colors/mods.vim


" ----------------------
"  HELPER FUNCTIONS
" ----------------------

" Auto reload .vimrc
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
