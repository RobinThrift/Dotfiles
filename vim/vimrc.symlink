" ----------------------
"  GENERAL
" ----------------------
call plug#begin('~/.vim/plugged')

" allow clipboard
set clipboard=unnamed

" custom leader
let mapleader = ","

" jk as escape sequence in insert mode
inoremap jk <esc>

" Enable Filetype plugins
filetype on
filetype plugin on
filetype indent on

" set autoread, so changes from outside are read
set autoread

" Let's Get WILD(mode)
set wildmode=list:full

" cmd bar height
set cmdheight=1

" ignore case when searching & highlight results
set ignorecase
set smartcase
set hlsearch
set incsearch

" regex magic 
set magic


" ----------------------
"  BUFFERS
" ----------------------

" switch to last used buffer
nnoremap <Leader>l :b#<CR>


" ----------------------
"  UI
" ----------------------

set t_Co=256

" Don't redraw while executing macros (good performance config)
set lazyredraw

" clear highlighted text on esc
nnoremap <silent> <esc> :noh<cr><esc>

" turn off error notifiers
set noerrorbells
set novisualbell

" Resize vertical split
nnoremap <silent> <Leader>> :exe "vertical resize +5"<CR>
nnoremap <silent> <Leader>< :exe "vertical resize -5"<CR>

" SYNTAX & UI
syntax on
syntax enable
set number

set splitbelow " more natural splits
set splitright

" highlight brackets
set showmatch
hi MatchParen cterm=underline ctermbg=none ctermfg=blue
hi Search cterm=none ctermfg=black ctermbg=yellow

" Highlight EOL
set list
set listchars=eol:¬,extends:…,precedes:…


" Rainbow Parentheses
Plug 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ----------------------
"  FILES
" ----------------------

set encoding=utf8
set ffs=unix,dos,mac
set nobackup " no backpus
set nowb
set noswapfile
set hidden


" ----------------------
"  TEXT EDITING
" ----------------------
set expandtab " spaces instead of tabs
set smarttab
set shiftwidth=4
set tabstop=4

set scrolloff=3

set lbr
set tw=400 " linebreak after 400 chars

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines



" ----------------------
"  MAPS
" ----------------------

" Use ctrl-[hjkl] to select the active split
nmap <silent> <c-k> :wincmd k<CR>                                                                                                                       
nmap <silent> <c-j> :wincmd j<CR>                                                                                                                       
nmap <silent> <c-h> :wincmd h<CR>                                                                                                                       
nmap <silent> <c-l> :wincmd l<CR>


" autocomplete on ctrl + c
imap <c-y> <c-x><c-o>
set complete=.,b,u,] " pull autocomplete from all sources (files, buffers, tags)


" Invert apostrophe/backtick 'jump to mark' behavior
nnoremap ' `
nnoremap ` '

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


" Enable/disable relative numbers
nnoremap <leader>r :call ToggleRelativeNumber()<CR>

function! ToggleRelativeNumber()
  if &relativenumber
    set norelativenumber
    set number
  else
    set relativenumber
    set nonumber
  endif
endfunction

" ,+s to save, reduce key strokes
nnoremap <Leader>s :w<CR>


" ----------------------
"  TOOLS
" ----------------------
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-surround'
Plug 'tmhedberg/matchit'

Plug 'Raimondi/delimitMate' 
let delimitMate_balance_matchpairs = 1
let delimitMate_expand_cr = 1
let delimitMate_jump_expansion = 1

Plug 'tpope/vim-commentary'

Plug 'mhinz/vim-startify'

" ----------------------
"  GIT
" ----------------------
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'



" ----------------------
"  LANGUAGES
" ----------------------

Plug 'othree/html5.vim', { 'for': 'html' }
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key='<C-E>'

" Markdown
Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'latex'] }
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.md hi link mkdLineBreak Underlined
let g:vim_markdown_folding_disabled=1

" TypeScript
Plug 'leafgarland/typescript-vim'
Plug 'Shougo/vimproc.vim', { 'do': 'make -f make_mac.mak' }
Plug 'Quramy/tsuquyomi'
autocmd FileType typescript nmap <buffer> td :TsuquyomiDefinition<CR>
autocmd FileType typescript nmap <buffer> tr :TsuquyomiRenameSymbol<CR>
autocmd FileType typescript nmap <buffer> th : echo tsuquyomi#hint()<CR>
let g:tsuquyomi_definition_split=1
let g:tsuquyomi_disable_default_mappings = 1
let g:tsuquyomi_auto_open=0
autocmd FileType typescript setlocal completeopt+=menu,preview
set suffixesadd+=.ts
set suffixesadd+=.tsx

Plug 'pangloss/vim-javascript', { 'for': ['html', 'javascript'] }
Plug 'mxw/vim-jsx', { 'for': ['html', 'javascript'] }
set suffixesadd+=.js

Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
autocmd FileType javascript nmap <buffer> td :TernDef<CR>
autocmd FileType javascript nmap <buffer> tr :TernRename<CR>
autocmd FileType javascript nmap <buffer> th :TernType<CR>
autocmd FileType javascript setlocal completeopt+=menu,preview

" Rust
Plug 'rust-lang/rust.vim'

Plug 'vim-pandoc/vim-pandoc-syntax'
" g:pandoc#syntax#conceal#use = 0

augroup pandoc_syntax
    au! BufNewFile,BufFilePRe,BufRead *.md set filetype=markdown.pandoc
augroup END


" Ctags Stuff
Plug 'majutsushi/tagbar', { 'do': 'npm install -g git+https://github.com/ramitos/jsctags.git' }

let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }

let g:tagbar_type_typescript = {
  \ 'ctagstype': 'typescript',
  \ 'kinds': [
    \ 'c:classes',
    \ 'n:modules',
    \ 'f:functions',
    \ 'v:variables',
    \ 'v:varlambdas',
    \ 'm:members',
    \ 'i:interfaces',
    \ 'e:enums',
  \ ]
\ }

nnoremap <Leader>t :TagbarToggle<CR>


" Colourscheme
Plug 'AlessandroYorba/Alduin'

call plug#end()



" ----------------------
"  COLOURSCHEME (here because of plugin loading)
" ----------------------
set background=dark
colorscheme alduin
hi User1 ctermbg=00 ctermfg=white
hi User2 ctermbg=00 ctermfg=blue
hi User3 ctermbg=00 ctermfg=02
set laststatus=2
set statusline=%1*%=\ %m%F\ %3*%y\ %2*%l:%c\ \ 


" ----------------------
"  HELPER FUNCTIONS
" ----------------------

" Auto reload .vimrc
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
" for testing colourschemes/highlighting
"map <Leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
"\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
""\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
